%{
    #include <cerrno>
    #include <climits>
    #include <cstdlib>
    #include <cstring> // strerror
    #include <string>
    #include <iostream>
    #include <memory>
    #include "driver.hh"
    #include "parser.hh"
    //#include "Variable.h"
%}

%option noyywrap nounput noinput batch debug

%option c++
%option yyclass="Scanner"

%{
  // Code definitions at the end of scanner.cpp

  // A number symbol corresponding to the value in S.
  yy::parser::symbol_type make_NUMBER(
    const std::string &s,
    const yy::parser::location_type& loc
  );

  void Scanner::UpdateLocation() {
    if (driver.location_debug) {
        std::cerr << "Action called " << driver.location << std::endl;
    }
    driver.location.columns(yyleng);
  }
%}


id    [a-zA-Z][a-zA-Z_0-9]*
int   [0-9]+
blank [ \t\r]

%{
  // Code run each time a pattern is matched.
  #define YY_USER_ACTION UpdateLocation();
%}

%%


%{
  // A handy shortcut to the location held by the driver.
  yy::location& loc = driver.location;
  if (driver.location_debug) {
  // Code run each time yylex is called.
    std::cerr << "BEFORE " << loc << std::endl;
  }
  // loc.step();
  if (driver.location_debug) {
    std::cerr << "AFTER " <<  loc << std::endl;
  }
%}

{blank}+   {
    if (driver.location_debug) {
        std::cerr << "Blank matched" << std::endl;
    }
    // loc.step();
}
\n+ {
    if (driver.location_debug) {
        std::cerr << "EOL called" << std::endl;
    }
    loc.lines(yyleng);
    loc.step();
}

"-"        {
              return yy::parser::make_MINUS  (loc);
           }
"begin"    return yy::parser::make_BEGINTOKEN (loc);
"end"      return yy::parser::make_ENDTOKEN (loc);
"program"  return yy::parser::make_PROGRAMKEYWORD (loc);
"var"      return yy::parser::make_VARKEYWORD (loc);
"if"       return yy::parser::make_IFKEYWORD (loc);
"then"     return yy::parser::make_THENKEYWORD (loc);
"else"     return yy::parser::make_ELSEKEYWORD (loc);
"while"    return yy::parser::make_WHILEKEYWORD (loc);
"do"       return yy::parser::make_DOKEYWORD (loc);
"function" return yy::parser::make_FUNCTION (loc);
"+"        return yy::parser::make_PLUS   (loc);
"*"        return yy::parser::make_STAR   (loc);
"/"        return yy::parser::make_SLASH  (loc);
"("        return yy::parser::make_LPAREN (loc);
")"        return yy::parser::make_RPAREN (loc);
":="       return yy::parser::make_ASSIGN (loc);
":"        return yy::parser::make_DECLARATION (loc);
";"        return yy::parser::make_SEMICOLON (loc);
"."        return yy::parser::make_DOT (loc);
"=="       return yy::parser::make_EQUAL (loc);
"!="       return yy::parser::make_NOTEQUAL (loc);
"<"        return yy::parser::make_LESS (loc);
"<="       return yy::parser::make_LESSEQUAL (loc);
">"        return yy::parser::make_GREATER (loc);
">="       return yy::parser::make_GREATEREQUAL (loc);

{int}      return make_NUMBER(yytext, loc);
{id}       {
                if (driver.location_debug) {
                    std::cerr << "ID found " << yytext << std::endl;
                }
                return yy::parser::make_IDENTIFIER(yytext, loc);
           }
<<EOF>>    return yy::parser::make_END (loc);
%%

yy::parser::symbol_type make_NUMBER(
  const std::string &s,
  const yy::parser::location_type& loc
) {
  errno = 0;
  long n = strtol(s.c_str(), NULL, 10);
  if (! (INT_MIN <= n && n <= INT_MAX && errno != ERANGE))
    throw yy::parser::syntax_error(loc, "integer is out of range: " + s);
  return yy::parser::make_NUMBER(n, loc);
}